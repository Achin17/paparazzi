<!DOCTYPE flight_plan SYSTEM "../flight_plan.dtd">

<flight_plan alt="395" ground_alt="292" lat0="50.726999" lon0="7.567305" max_dist_from_home="580" name="opennuas simplesquare airspeed" qfu="310" security_height="45" home_mode_height="120">
  <header>
#include "inter_mcu.h"
#include "subsystems/datalink/datalink.h"
#include "firmwares/fixedwing/guidance/energy_ctrl.h"
static inline uint16_t obcrulesdatalinklosscounter = 0;
  </header>
  <waypoints>
    <waypoint name="AIRFIELDHOME" x="-51.5" y="19.5"/>
    <waypoint name="HOME" x="0.0" y="0.0"/>
    <waypoint name="STDBY" x="42.1" y="64.0"/>
    <waypoint name="COMMSHOLD" x="20.0" y="44.0"/>
    <waypoint name="CLIMB" x="-155.4" y="65.2"/>
    <waypoint name="TESTTOOFAR" x="34.8" y="377.0"/>
    <waypoint name="MOB" x="79.6" y="179.2"/>
    <waypoint name="1" x="236.2" y="51.2"/>
    <waypoint name="2" x="-120.0" y="41.8"/>
    <waypoint name="3" x="-105.9" y="240.1"/>
    <waypoint name="4" x="228.8" y="246.4"/>
    <waypoint name="_MB1" x="416.3" y="-68.7"/>
    <waypoint name="_MB2" x="-391.6" y="-186.3"/>
    <waypoint name="_MB3" x="-376.2" y="293.2"/>
    <waypoint name="_MB4" x="357.2" y="389.7"/>
    <waypoint name="AF" x="-34.7" y="91.3" height="30"/>
    <waypoint name="SD" x="-1600." y="-36."/><!-- When landing via GLS -->
    <waypoint name="TOD" x="-1600." y="-36."/><!-- When landing via GLS -->
    <waypoint name="TD" x="-130.2" y="-17.7" height="0.0"/>
    <waypoint name="_BASELEG" x="41.5" y="113.7" height="200.0"/><!--height?-->

<!-- SA = Search Area -->
<!--
    <waypoint name="SA1" x="20.0" y="44.0" height="115."/>
    <waypoint name="SA2" x="20.0" y="44.0" height="115."/>
    <waypoint name="SA3" x="20.0" y="44.0" height="115."/>
    <waypoint name="SA4" x="20.0" y="44.0" height="115."/>
    <waypoint name="SA5" x="20.0" y="44.0" height="115."/>
-->

<!--
    <waypoint name="TST-1" x="20.0" y="44.0" height="115."/>
    <waypoint name="TST-2" x="20.0" y="44.0" height="115."/>
    <waypoint name="TST-3" x="20.0" y="44.0" height="115."/>
-->

  </waypoints>
  <sectors>
    <sector name="MissionBoundary" color="yellow">
      <corner name="_MB1"/>
      <corner name="_MB2"/>
      <corner name="_MB3"/>
      <corner name="_MB4"/>
    </sector>
<!--
    <sector name="SurveyArea" color="green">
      <corner name="SA1"/>
      <corner name="SA2"/>
      <corner name="SA3"/>
      <corner name="SA4"/>
      <corner name="SA5"/>
    </sector>
-->
  </sectors>
  <exceptions>
<!-- TODO: some exeption should be localblock exceptions>-->
<!-- if datalink loss > 11 sec (time is in tento of seconds) automatically move to commshold-->
    <exception cond="(datalink_time > 110) && !(nav_block == IndexOfBlock('WaitForGPSFix')) && !(nav_block == IndexOfBlock('Initialize')) && !(nav_block == IndexOfBlock('Set_base_location')) && !(nav_block == IndexOfBlock('Takeoff')) && !(nav_block == IndexOfBlock('AutoTakeoff')) && !(nav_block == IndexOfBlock('Land')) && !(nav_block == IndexOfBlock('Final')) && !(nav_block == IndexOfBlock('Flare'))" deroute="CommsHoldLoiter"/>
 <!-- This use avarage value ove a few secs this to avoid sag during ascend manouvers> set in airframe -->
   <exception cond="LessThan(fbw_state->vsupply,94) && !(nav_block == IndexOfBlock('WaitForGPSFix')) && !(nav_block == IndexOfBlock('Initialize')) && !(nav_block == IndexOfBlock('Set_base_location')) && !(nav_block == IndexOfBlock('Takeoff')) && !(nav_block == IndexOfBlock('AutoTakeoff')) && !(nav_block == IndexOfBlock('Land')) && !(nav_block == IndexOfBlock('Final')) && !(nav_block == IndexOfBlock('Flare'))" deroute="Standby"/>
  <!-- test if to high -->
 <!--  <exception cond="(GetPosAlt() > ground_alt+300) && !(nav_block == IndexOfBlock('WaitForGPSFix')) && !(nav_block == IndexOfBlock('Initialize')) && !(nav_block == IndexOfBlock('Set_base_location')) && !(nav_block == IndexOfBlock('Takeoff')) && !(nav_block == IndexOfBlock('AutoTakeoff'))" deroute="Standby"/>-->
   <exception cond="!(InsideMissionBoundary(GetPosX(), GetPosY())) && !(nav_block == IndexOfBlock('WaitForGPSFix')) && !(nav_block == IndexOfBlock('Initialize')) && !(nav_block == IndexOfBlock('Set_base_location')) && !(nav_block == IndexOfBlock('Takeoff')) && !(nav_block == IndexOfBlock('AutoTakeoff')) && !(nav_block == IndexOfBlock('Land')) && !(nav_block == IndexOfBlock('Final')) && !(nav_block == IndexOfBlock('Flare'))" deroute="Standby"/>
<!--<TODO: Add somethin like pre_call="if (!InsideRed(GetPosX(), GetPosY())) NavKillThrottle();-->
  </exceptions>
  <blocks>
    <block name="WaitForGPSFix">
      <set value="1" var="kill_throttle"/>
      <!-- Wait when there is no 3d fix or accuracy is not good enough -->
      <while cond="!GpsFixValid() || gps.pacc > 1700"/>
     </block>
    <block name="Initialize">  
      <while cond="LessThan(NavBlockTime(), 12)"/>
      <call fun="NavSetGroundReferenceHere()"/>
      <!--  TODO Set QNH here based on GPS height -->
    </block>
    <block name="Set_base_location">
      <set  var="obcrulesdatalinklosscounter" value="0"/>
      <call fun="NavSetWaypointHere(WP_HOME)"/>
      <call fun="NavSetGroundReferenceHere()"/>
      <while cond="LessThan(NavBlockTime(), 8)"/>
      <call fun="NavSetWaypointHere(WP_AIRFIELDHOME)"/>
      <!-- We must have RC at least once switched on just to test, this check can be deleted if everything works 100% in Auto2 -->
      <while cond="RCLost()"/> <!-- to make sure we do not hop to AUTO2 and engine starts running , at least switch on then maybe off if you wantto -->
      <deroute block="AutoTakeoff"/>
    </block>
    <block name="Takeoff" strip_button="Takeoff (wp CLIMB)" strip_icon="takeoff.png">
      <exception cond="GetPosAlt() > ground_alt+30" deroute="Standby"/>
      <set value="0" var="kill_throttle"/>
      <while cond="LessThan(NavBlockTime(), 4)"/> 
     <!-- <set value="1" var="launch"/>-->
      <set value="0" var="autopilot_flight_time"/>
      <set value="CLIMB_AIRSPEED" var="v_ctl_auto_airspeed_setpoint"/>
      <go wp="CLIMB"/>
    </block>
    <block name="AutoTakeoff">  
      <exception cond="GetPosAlt() > ground_alt+30" deroute="SimpleSquareRoute"/>
      <set value="0" var="kill_throttle"/>   
      <set value="1" var="launch"/>
      <set value="0" var="autopilot_flight_time"/>
      <!--  <exception cond="pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1" deroute="Standby"/>-->
      <exception cond="pprz_mode == PPRZ_MODE_MANUAL" deroute="Standby"/>
      <!--  <exception cond= RCLost() todo, engine off and glide in a circle maybe-->
      <attitude pitch="20" roll="0" throttle="1" until="GetPosAlt() > ground_alt+40" vmode="throttle"/>
    </block>
    <block key="a" name="Standby" strip_button="Standby" strip_icon="home.png">
      <!--<exception cond="!InsideMissionBoundary(GetPosX(), GetPosY())" deroute="Constant Slope Land Left AF-TD"/>--> 
      <set value="NOMINAL_AIRSPEED" var="v_ctl_auto_airspeed_setpoint"/>
      <circle radius="nav_radius" wp="STDBY"/>
    </block>
    <block name="CommsHoldLoiter" strip_button="CommsHold" strip_icon="recenter.png">   
      <!-- TODO: Make this block correct it is NOT YET FINISHED now -->
      <set value="NOMINAL_AIRSPEED" var="v_ctl_auto_airspeed_setpoint"/>
      <exception cond="(stage_time > 120) || (obcrulesdatalinklosscounter > 2)" deroute="AirfieldHomeLoiter"/>
      <!-- resume if datalink is regained-->   
      <!--TODO If the data link is regained prior to the conclusion of 2 minutes of loiter at
      Comms Hold the mission maybe continued otherwise any subsequent  TODO -->
      <exception cond="datalink_time == 0" deroute="Standby"/>      <!-- TODO as soon as if has link again Go EL2 > -->
      <!-- Since it arrived we must raise a counter by one. it's not alowed by rules to occur  more than twice, then we must move to airfieldhome -->
      <!-- TODO: set only after aircraft arrive in the loiter -->
       <set var="obcrulesdatalinklosscounter" value="obcrulesdatalinklosscounter+1"/>
      <!-- <while no link then -->
       <circle wp="COMMSHOLD" radius="nav_radius"/>
    </block>
    <block name="AirfieldHomeLoiter">
    <!-- rules state: ...the aircraft must be programmed to return directly to waypoint “Airfield Home”. On arriving at “Airfield Home”, the aircraft must enter a loiter centred on that waypoint... -->
      <!-- TODO: make sure it does not cross a boundary going there so add maybe a helper point, an the term "arriving At is unclear.."-->
     <go wp="AIRFIELDHOME" hmode="route" approaching_time="0"/>
      <!-- <exception cond="stage_time > 120" deroute="AirfieldHomeSoftlyDown"/> -->
      <circle wp="AIRFIELDHOME" radius="nav_radius"/>
    </block>
    <block key="8" name="Figure 8 around wp 1" strip_button="Figure 8 (wp 1-2)" strip_icon="eight.png">
      <eight center="1" radius="nav_radius" turn_around="2"/>
    </block>
    <block key="o" name="Oval 1-2" strip_button="Oval (wp 1-2)" strip_icon="oval.png">
      <oval p1="1" p2="2" radius="nav_radius"/>
    </block>
    <block key="m" name="MOB" strip_button="Circle around here" strip_icon="mob.png">
      <call fun="NavSetWaypointHere(WP_MOB)"/>
      <circle radius="100" wp="MOB"/>
    </block>
    <block key="s" name="SimpleSquareRoute">
      <!-- keep flying this block untile batter power is to low -->
    <!--  <exception cond="electrical.bat_low == TRUE"  deroute="Standby"/>-->
      <set value="NOMINAL_AIRSPEED" var="v_ctl_auto_airspeed_setpoint"/>
      <while cond="TRUE">
        <go from="1" hmode="route" wp="2"/>
        <go from="2" hmode="route" wp="3"/>
        <go from="3" hmode="route" wp="4"/>
        <go from="4" hmode="route" wp="1"/>
      </while >
    </block>

<!-- GLS landings 
    <block name="land">
      <call fun="gls_init(WP_AF,WP_SD, WP_TOD, WP_TD)"/>
      <call fun="nav_compute_baseleg(WP_AF, WP_TD, WP__BASELEG, nav_radius)"/>
      <circle radius="nav_radius" until="NavCircleCount() > 0.5" wp="_BASELEG"/>
      <circle radius="nav_radius" until="And(NavQdrCloseTo(DegOfRad(baseleg_out_qdr)-(nav_radius/fabs(nav_radius))*10), 10 > fabs(GetPosAlt() - WaypointAlt(WP__BASELEG)))" wp="_BASELEG"/>
    </block>
    <block name="final">
      <exception cond="ground_alt + 10 > estimator_z" deroute="final2"/>
      <call fun="gls(WP_AF,WP_SD, WP_TOD, WP_TD)"/>
    </block>
    <block name="final2">
      <exception cond="(2 > sonar_distance)" deroute="flare"/>
      <call fun="gls(WP_AF,WP_SD, WP_TOD, WP_TD)"/>
    </block>
-->
    <block key="l" name="Constant Slope Land Right AF-TD" strip_button="Land right (wp AF-TD)" strip_icon="land-right.png">
      <call fun="nav_compute_final_from_glide(WP_AF, WP_TD, 15.)"/>
      <set value="DEFAULT_CIRCLE_RADIUS" var="nav_radius"/>
      <deroute block="Land"/>
    </block>
    <block name="Constant Slope Land Left AF-TD" strip_button="Land left (wp AF-TD)" strip_icon="land-left.png">
      <call fun="nav_compute_final_from_glide(WP_AF, WP_TD, 15.)"/>
      <set value="-DEFAULT_CIRCLE_RADIUS" var="nav_radius"/>
      <deroute block="Land"/>
    </block>
    <block name="Land">
      <set value="NOMINAL_AIRSPEED" var="v_ctl_auto_airspeed_setpoint"/>
      <set value="80" var="nav_radius"/>
      <call fun="nav_compute_baseleg(WP_AF, WP_TD, WP__BASELEG, nav_radius)"/>
      <circle radius="nav_radius" until="NavCircleCount() > 0.5" wp="_BASELEG"/>
      <set value="GLIDE_AIRSPEED" var="v_ctl_auto_airspeed_setpoint"/>
      <circle radius="nav_radius" until="NavQdrCloseTo(DegOfRad(baseleg_out_qdr)-(nav_radius/fabs(nav_radius))*10) && 15 > fabs(GetPosAlt() - WaypointAlt(WP__BASELEG))" wp="_BASELEG"/>
    </block>
   <!-- todo add brake value depending on groundspeed value-->
    <block name="Final">
      <go approaching_time="5" from="AF" hmode="route" vmode="glide" wp="TD"/>
      <set var="v_ctl_auto_airspeed_setpoint" value="(GLIDE_AIRSPEED*10.0/12.0)"/> 
    </block>   
    <block name="Flare">
      <go approaching_time="0" from="AF" hmode="route" throttle="0.0" vmode="glide" wp="TD"/>
      <attitude roll="0.0" throttle="0.0" until="FALSE" vmode="throttle"/>
   <!-- TODO: retract brake after landed is true (with +3seconds margin) better a sensor(witch) that detects IsAircraftOnSolidGround -->
    </block>
    <block key="<Control>t" name="TestToFar" strip_button="To Far" strip_icon="OpenUAS/openuas_return.png">
      <go wp="TESTTOOFAR"/>
    </block>
  </blocks>
</flight_plan>

<!--
5.5.2 Loss of Data Link
All teams must implement a method to establish the status (existence) of a command and control data link between the GCS and the UAV. This status must be
updated at a rate of at least 1 Hz and if the data link is lost a data link flight mode must be entered.
Teams must implement a system that behaves as follows:
 > This flight mode must be activated if the data link is lost for 10 seconds or greater.
2014 UAV Challenge Outback Rescue Page 21 of 48
v1.2
Search and Rescue Challenge Rules

This flight mode, once activated, must return the aircraft directly to the
waypoint “Comms Hold” 

(no time limit for transit, but it must be direct to the waypoint) 

and enter a loiter centred on that waypoint.

* After a maximum of 2 minutes of loitering, if the data link has not
been re-established, the aircraft must be programmed to return
directly to waypoint “Airfield Home” 

 where the RC link may be re-established for a manual recovery. There is no time
limit for the transit, but it must be direct to the waypoint. (Note: The
Range Safety Officer must be informed that the aircraft is making its
way back to Kingaroy to ensure appropriate notification is given to
other airspace users. This information may come from observers,
officials, or team members and is not a requirement on the competing
team.)

* On arriving at “Airfield Home”, the aircraft must enter a loiter centred
on that waypoint. If after 2 minutes, RC contact has not been re-
established, an autopilot initiated and controlled flight termination
mode must be activated. A controlled flight termination mode may be
(but not limited to) an autonomous landing or entering the flight
termination mode (Section 5.6).
This flight mode must be able to be activated from the ground by the UAV
Controller at the command of the judges or range safety personnel.

If the data link is regained prior to the conclusion of 2 minutes (maximum) of
loiter at “Comms Hold” the mission maybe continued, otherwise any
subsequent regain of data link still requires return to the competition airfield
and land.
Each team is allowed a maximum of two loss of data link failures. The third
(or additional) loss of data link failure, the Loss of Data Link mode must be
entered and the mission terminated with a return to the competition airfield
and landing or flight termination (Section 5.6).
If there is a loss of GPS while experiencing a loss of data link whilst in
Autonomous mode(s), the flight termination (Section 5.6) must be
activated immediately. This behaviour must be documented in the D2
document.

* If there is a mission boundary crossing whilst experiencing a loss of data
link, the flight termination (Section 5.6) must be activated immediately.
This behaviour must be documented in the D2 document.
-->
