<!DOCTYPE flight_plan SYSTEM "../flight_plan.dtd">
<!-- This is the Flightplan of Team OpenUAS from the Netherlands for use in the
     Australian UAV Outback Challenge of 2014. 
     
     Read about this challenge here:
     http://www.uavoutbackchallenge.com.au/
     
     Thanks to all involved, specifically all the help from CdW, DD, BR, GdC, AvdL
     * TU Delft University of Technology, L&R http://www.tudelft.nl
     * MAVLab - http://mavlab.info
     * 1 bit squared http://1bitsquesred.com
     * everyone else who helped out

TYPE 1 OPERATION Flightplan, fully autonomous in-air joe detection integration

Now with integrated TYPE2 operations option (soon...)
TYPE 2 OPERATION Flightplan, fully autonomous search, but on ground joe detection integration

STRATEGY: 

# Have one flightplan which does it all, no need to upload anything!

USAGE: 

To use the flightplan's embedded options:

# Put the Waypoint SCRUTINEERING inside the mission boundary the the SCRUTINEERING flight will be executed.
# Put the Waypoint JOE inside the mission boundary the the RESCUE only part of the flight will be executed.(TYPE2)

NOTES:

# This flightplan contains both the SR, as default mission and the Scruteneering flight.
# Mission boundary coodinates are for both Scrutineering and SnR the same
# Alert boundaries are different for Scrutineering and SnR Missions

TODO:
# Latest coordinates of KMZ of 20131017, a 100% validationcheck.
# TODO: 
# add times to blocks to prevent to early forcedcrash. e.g after 2 second from tkeof border cannot be crossed in reality, so if triggered do a softcircledown or so
# or mabye calculate distance and look at airframe REAL max ground speed(with wind in backeve) and deduct time it would take, if within < margin it cannot be missionborder
# but if scrutineering day, than it can be since we test it closeby mission boundary
# TODO autonomous calculation AF-TD dependand on measured wind direction
# add even **better** exceptions
# Response of cam picture if successful of not via TICKET module
#If we set the air crowbrake make sure it is retracted again when contining normal ops (maybe or above a certain airspeed?)

-->

<!-- Test via command xmlwf yourfligtplanname.xml for welformedness of the xml document -->
<!-- The base lat lon of the flightplan is the AIRFIELDHOME point -->
<!-- The ground_alt will be set later on also with real testflight, mind the ground height profile please -->
<!-- WARNING: max_dist_from_home very very likely never be reached due to boundary crossing first -->
<procedure>
<!-- ******************************** HEADERS ****************************** -->
<header>
// PHOTOGRAMMETRY settings

    #define PHOTOGRAMMETRY_SWEEP_ANGLE 53		// Degrees from the North
    #define PHOTOGRAMMETRY_OVERLAP 30		// 1-99 Procent
    #define PHOTOGRAMMETRY_SIDELAP 20		// 1-99 Procent
    #define PHOTOGRAMMETRY_RESOLUTION 50		// mm pixel projection size
    
// Automatic include of Camera trigger if camera is present and only take pictures inside polygon

// Incluse airframe.h To be able to use specific variables 
    #include "generated/airframe.h"

// Completly replace with onboard recon copmpter interface
    #ifdef DC_AUTOSHOOT_QUARTERSEC_PERIOD
    #include "modules/digital_cam/led_cam_ctrl.h"
    //TODO make shooting distance not periodic
    #define LINE_START_FUNCTION dc_autoshoot = DC_AUTOSHOOT_PERIODIC;
    #define LINE_STOP_FUNCTION dc_autoshoot = DC_AUTOSHOOT_STOP;
    #endif

//Enable energy control commands from within flightplan
#include "firmwares/fixedwing/guidance/energy_ctrl.h"

//Needed for the DROP function
static inline uint16_t G = 9.81;

  </header>
<!-- ******************************* WAYPOINTS ***************************** -->
  <waypoints>
    <waypoint name="HOME" x="0." y="0." height="2."/> <!-- NEEDED FOR DEBUG ONLY -->
    <waypoint name="THROWSPOT" x="0." y="30." height="0."/>
    <waypoint name="STDBY" x="0." y="-130." height="95."/> <!-- DEBUG ONLY For helping out in flightplan security of states-->
    <waypoint name="CLIMB" x="50." y="390." height="80."/> <!-- TODO make Hidden, should be dynamic based on throw direction-->
    <!-- DANGER, DEBUG ONLY Disable later on, used for FDT Debugging only -->
    <waypoint name="TESTTOOFAR" x="800." y="-100." height="115."/><!-- DANGER, DEBUG ONLY Disable later on, used for FDT Debugging only -->

<!-- Set this and Upload for  scrutineering day --> <!-- OR,  IDEA base it on throwing spot position maybe-->
<!--      <waypoint name="_SCRUTINEERINGDAY" x="0." y="0." height="0."/> -->
<!-- Set inside and it will mean a scrutineer flight day -->
    <waypoint name="_SCRUTINEERINGDAY" x="-999." y="-999." height="0."/> 

<!-- Scrutineering Course -->
<!-- South * East
TST-1 = -26° 34' 58.9" * 151° 50' 16.2"
TST-2 = -26° 35' 04.1" * 151° 50' 44.5"
TST-3 = -26° 35' 23.2" * 151° 50' 45.9"

OK?
-->
<!-- extra boundary maybe add it -->
<!-- ABS = Alert Boundary scrutineering flight -->
<!-- TODO real positions and better naming-->
<!--
    <waypoint name="_ABS1" lat="" lon="" height="400."/>
    <waypoint name="_ABS2" lat="" lon="" height="400."/>
    <waypoint name="_ABS3" lat="" lon="" height="400."/>
-->


<!-- SA = Search Area -->
<!--
    <waypoint name="SA1" x="492.8" y="-4414.0" height="115."/>
    <waypoint name="SA2" x="1725.0" y="-4606.0" height="115."/>
    <waypoint name="SA3" x="1330.0" y="-6682.0" height="155."/>
    <waypoint name="SA4" x="1083.0" y="-6792.0" height="155."/>
    <waypoint name="SA5" x="-115.2" y="-6632.0" height="155."/>
-->


<!-- Additional VIA_EL2 Waypoint since we must go *via* EL2, and to have a little
    more meters optimal for our scan strips entry, otherwhise we could miss one
    photo and not spot Joe. So not via Paris to Rome, but Via EL2 to Joe -->


<!-- For the Payload release -->
    <!-- <waypoint name="WAIT" x="-70." y="-70." height="115."/> --> <!-- TODO Check is needed or better solution possible for Pre-tests -->
    <waypoint name="BASELEG" x="-20." y="0."/>

<!-- Position where Outback Joe would be located. If this waypoint is situated
     outside search area(The default situation), by this way the flightplane
     -knows if it should start a search phase. If it is moved inside the area it
      will start a rescue phase, a.k.a bottledrop.  -->

<!-- Note that waypoint *Height* of 0m is the OUTBACKJOE, Joe -->

    <waypoint name="OUTBACKJOE" x="666." y="777." height="0."/>
 <!-- The START from here towards target(Joe), wile dynamically calculating the RELEASE point to target the OUTBACKJOE -->
    <waypoint name="START" x="-100" y="300" height="65."/>

    <!-- Note that 70m is the release height, we are not allowed to go below
    60 meters and need at least some GPS height fluctuation into account
    Also if we steeply move UP from START to RELEASE the release will maybe a
    little more accurate, hmmmm theoretically -->
    <waypoint name="RELEASE" x="-100." y="400." height="75."/>

<!-- For autonomous landing -->
    <waypoint name="AF" x="177.4" y="45.1" height="30."/> <!-- AutoFinal -->
    <waypoint name="TD" x="28.8" y="57.0" height="0."/> <!-- Touchdown -->
    <waypoint name="_BASELEG" x="-100" y="350"/>
  </waypoints>

<!-- ******************************** SECTORS ****************************** -->
<!-- Sectors are good for displaying an overlay -->
  <sectors>
    <sector name="SurveyArea" color="green">
      <corner name="SA1"/>
      <corner name="SA2"/>
      <corner name="SA3"/>
      <corner name="SA4"/>
      <corner name="SA5"/>
    </sector>
  </sectors>

<!-- ****************************** EXCEPTIONS ***************************** -->
  <exceptions>
  </exceptions>

<!-- *********************************************************************** -->
<!-- ********************** FLIGHTPLAN STARTINGPOINT *********************** -->
<!-- *********************************************************************** -->

<!-- *********** Wait for GPS fix, 3D by default *********** -->
  <blocks>
    <block name="Startup">
      <!-- IDEA Close the hatch so not able to insert payload before there is a 3D fix , however maybe not so handy anyhow since we need to wat be fre we can insert-->
      <!--  <set value="NavDropCloseHatch" var="unit"/> -->
      <set value="1" var="kill_throttle"/>
<!-- if no valid fix or gps accuracy> 15m or no AHRS , it a no-go wait-->
      <while cond="!GpsFixValid() || gps.pacc > 1500 || !(ahrs.status == AHRS_RUNNING)"/>
    </block>
    
<!-- *********** Set the ground reference height and the home position *********** -->
<!-- a second init will follow since the plane thrower will still walk to launchpoint -->

    <block name="Geo init">
      <while cond="LessThan(NavBlockTime(), 8)"/><!--  TODO see if a wait is really needed -->
      <call fun="NavSetGroundReferenceHere()"/>
      <call fun="NavSetWaypointHere(WP_HOME)"/>
    </block>

    <!-- *********** Set the ground reference height and the home position *********** -->

<!-- a second init will follow since the plane thrower will still walk to launchpoint-->

    <block name="Setting_home_location">
      <while cond="gps.pacc > 1000"/><!--at least 10m precision needed  TODO  continue if not within 10 seconds --><!-- TODO better flow-->
      <call fun="NavSetGroundReferenceHere()"/>
      <call fun="NavSetWaypointHere(WP_HOME)"/>
      <call fun="NavSetWaypointHere(WP_AIRFIELDHOME)"/><!-- <FOR TESTS only disable in real mission -->
      <!--  TODO Set QNH here based on GPS height if allowed from commitee -->

      <!-- We must have RC at least once switched on just to test, this check can be deleted if everything works 100% in Auto2 -->
      <while cond="RCLost()"/> <!-- to make sure we do not hop to AUTO2 and engine starts running , at least switch on then maybe off if you wantto -->
      <!-- TODO maybe switch on ACL blick as soon as we are ready to go  -->
    </block>

<!-- *********** Throttle off holdingpoint *********** -->
    <block name="Holding point">
     <!--  TODO: make some movements on all defelctros as a sign we are in holding and to see if all works Maybe a separate testblock-->
      <!--  <set value="0" var="ap_state->commands[COMMAND_BRAKE]"/> -->
     
      <!--Just to make sure in case of flightplan mishap, it is no too far away -->
      <!-- <set var="waypoints[WP_START].x" value="WaypointX(WP_EL2) + 50"/> -->
      <!-- <set var="waypoints[WP_START].y" value="WaypointY(WP_EL2) + 50"/> -->
      <call fun="NavKillThrottle()"/>
      <set value="1" var="kill_throttle"/> <!-- maybe replace with <call fun="NavKillThrottle()"/> -->
      <attitude pitch="0" roll="0" throttle="0" vmode="throttle" until="FALSE"/><!-- maybe not moving the plane would still make a test of defelction possible -->
<!-- If over 50% throttleis given auto2 takeoff is initiated, it is not an RC steering method, just a trigger, make sure transmiter is set in auto2 mode, or else switched off -->
      <!-- <exception cond="RCChannel(RADIO_THROTTLE) > 1600" deroute="Takeoff"/> --><!-- Todo ACtivate if everything works-->
    </block>

<!-- *********************************************************
     *********** Search Area Entry Procedure Start ***********
     ***************************************************** -->

    <block key="t" name="Takeoff" strip_button="Takeoff" strip_icon="takeoff.png">
      <call fun="NavSetWaypointHere(WP_THROWSPOT)"/>
    <!--  <set value="0" var="ap_state->commands[COMMAND_BRAKE]"/> -->
    <!--  <set value="3000" var="ap_state->commands[COMMAND_CAMBER]"/> -->
      <!--<exception cond="estimator_z > ground_alt+60" deroute="determineflighttype"/>-->

      <set value="0" var="kill_throttle"/>
      <set value="1" var="launch"/>
      <set value="0" var="autopilot_flight_time"/>
      <call fun="NavSetWaypointHere(WP_HOME)"/>
      <while cond="LessThan(NavBlockTime(), 3)"/>
      <call fun="NavSetGroundReferenceHere()"/>
      <while cond="LessThan(NavBlockTime(), 3)"/>
      <call fun="NavSetWaypointHere(WP_AIRFIELDHOME)"/>
      <set value="0" var="kill_throttle"/>
      <set value="1" var="launch"/>
      <set value="0" var="autopilot_flight_time"/>
<!-- TODO disable deceleron and maybe set a little camber if at all possible-->
     <!-- <set value="3000" var="ap_state->commands[COMMAND_CAMBER]"/> -->
      <deroute block="Climbout"/>
    </block>

<!-- TODO test needed pitch value -->
    <block name="Climbout">
      <!--<exception cond="rc_status==RC_REALLY_LOST" after 3 seconds and no IMU deroute="softlydown">if using RC stil on with a Auto2 mode switch-->
      <attitude pitch="10" roll="0" throttle="1.0" until="GetPosAlt() > ground_alt+40" vmode="throttle"/>
    </block>

    <block name="determineflighttype">
      <exception cond="InsideMissionBoundary(WaypointX(WP__SCRUTINEERINGDAY), WaypointY(WP__SCRUTINEERINGDAY))" deroute="Scrutineering Autonomy Start"/>
    </block>

<!-- *********************************************************
     *********** Search Area Entry Procedure Start ***********
     ***************************************************** -->

<!-- maybe a HelperWaypoint to gettart n return from a mission Tracking to EL1
      <set value="0" var="ap_state->commands[COMMAND_CAMBER]"/>
      <set value="0" var="ap_state->commands[COMMAND_BRAKE]"/>-->

<!-- *********** Track to EL-1 *********** -->
    <block name="TrackToEL1">
      <set var="v_ctl_auto_throttle_cruise_throttle" value="V_CTL_AUTO_THROTTLE_MAX_CRUISE_THROTTLE"/> <!-- TODO see if this forced throttle stuff will work -->
      <go wp="EL1" hmode="route" throttle=".99"/>
    </block>
    <!--  maybe add other waypoint to enterarea in a better way -->

<!-- *********** Track Direct to EL-2, Entry to Search Area only via EL-2 *********** -->
    <block name="TrackToEL2">
      <set var="v_ctl_auto_throttle_cruise_throttle" value="V_CTL_AUTO_THROTTLE_MAX_CRUISE_THROTTLE"/> <!-- TODO see if this forced throttle stuff will work -->
      <go wp="VIAEL2" hmode="route"/>
     <!-- <go wp="EL2" hmode="route" throttle=".99" until ETA <5 sec then normal cruise again/>-->
    </block>

<!-- "Type 1" operation:
     an areascan with taking pictures of ground realtime anyyse and if joe found an accknolege signal given , autonomous drop and return.

     "Type 2"
     * There is a search phase and a rescue phase.
     ** Search means areascan gathering the imagery needed to pinpoint the location of lost Joe ("Type 1" operation)
     ** Rescue means the payload dropping phase. ("Type 1" operation)
     -->
     <!-- TODO: if defined TYPE2 then -->
<!--  
    <block name="determine_search_or_rescue_phase">
      <exception cond="InsideSurveyArea(WaypointX(WP_OUTBACKJOE), WaypointY(WP_OUTBACKJOE))" deroute="RescueJoe"/>
    </block>-->

<!-- ***********
See for calculations of camera values used
http://www.openuas.org/intranet/webapps/pmwiki/pmwiki.php?n=UAS.Targetcalc
Max Scanwidh at 120m is 180m
Mission scanwidh is 144m thus with a 20% overlap. Overlap depends on lots of factors,
best to perform many real life tests with the CAM
*********** -->

    <block name="SearchForJoe">
    <!--  was NavPolySurveySweepBackNum -->
      <exception cond="PolySurveySweepBackNum >= 1" deroute="ReturnToBase"/> <!-- ? TODO decide to search in reverse again on until battery < volts needed to return home? if nothing found, go back?-->
      <!-- <exception cond="FoundJoe" deroute="WaitForJugesDropApprovale"/> -->
      <!-- Parameters
      The orientation of the sweeps can ranges from north south to east west and
       any where in between (-90 <-> 90 degrees respectively).
       The side of the polygon the aircraft starts on (ex. north or south) is
       determined by the side of the polygon the entry point is located.
       call fun="InitializePolygonSurvey(WP_S1, NumOfCorners, SweepWidth, Orientation)"/> -->

       <!-- SweepWidth  max photo with at height - 20 pct overlap 180- etc-->
      <call fun="nav_survey_poly_osam_setup(WP_VIAEL2, 5, 144, 70)"/> <!-- TODO correct angle of how we want to search -->
      <call fun="nav_survey_poly_osam_run()"/>
    </block>

<!--WaitForJugesDropApproval if we do a Type 1 search otherwise it would be approved already Warning then never enter this block -->
<block name="WaitForJugesDropApproval">
<!-- circle with circle border already alligend with Drop align route, or maybe some better ideas... -->
<!-- TODO: if blocktime approval takes to long do what? -->
</block>

<!-- *********************************************************
     *********** Search Area Departure Procedure *************
     ***************************************************** -->

<!-- Todo add dashing speed if batter is above certain voltage level -->

<!-- Generic way to leave search area for both search and rescue missions -->
    <block name="ExitSearchArea">
    <!-- TODO Add max speed again -->
      <go wp="EL3"/>
    </block>

<!-- *********** Exit Search Area only via EL-3 *********** -->
    <block name="ExitSearchAreaViaEL3">
      <!-- TODO Add max speed again if not set -->
      <go wp="EL3"/>
    </block>

<!-- *********** Track Direct to EL-4 *********** -->
    <block name="GoToEL4">
     <!-- TODO Add max speed again if not set -->
      <go wp="EL4" hmode="route"/>
    </block>

<!-- ************ Track to Kingaroy Airport *********** -->
    <block name="ReturnToBase">
     <!-- TODO Add max speed again if not set -->
      <go wp="AIRFIELDHOME" hmode="route"/>
      <deroute block="InitiateLandingApproach"/>
    </block>

<!-- *********************************************************
     **************** Deliver the Payload ********************
     ***************************************************** -->

    <block name="RescueJoe">
      <!-- <go wp="VIAEL2" hmode="route"/>--> <!-- TODO maybe not needed -->
      <deroute block="drop"/>
    </block>
    
 <!--  AS REMINDER 
 extern unit_t nav_drop_compute_approach( uint8_t wp_target, uint8_t wp_start, float radius );
extern unit_t nav_drop_update_release( uint8_t wp_target );
extern unit_t nav_drop_shoot( void );
extern float nav_drop_trigger_delay, nav_drop_start_qdr;
extern bool_t compute_alignment(uint8_t w1, uint8_t w2, uint8_t start, uint8_t end, float d_before, float d_after);

#define NavDropComputeApproach(_target, _start, _radius) nav_drop_compute_approach(_target, _start, _radius)
#define NavDropUpdateRelease(_wp) nav_drop_update_release(_wp)
#define NavDropShoot() nav_drop_shoot()
#define NavDropCloseHatch() ({ ap_state->commands[COMMAND_HATCH] = MIN_PPRZ; })
#define NavDropAligned() Qdr(DegOfRad(nav_drop_qdr_aligned)) -->


<!-- *********** Drop Compute Approach *********** -->
    <block name="drop" strip_button="Drop">
 <!-- TODO set Height to minimum height AGL allowed by commitee ?60M -->   
 <!-- TODO determine what still is success and is fastest value for this 100  -->
      <set var="waypoints[WP_START].x" value="WaypointX(WP_OUTBACKJOE) + 100"/>
      <set var="waypoints[WP_START].y" value="WaypointY(WP_OUTBACKJOE) + 100"/>

      <set value="nav_drop_compute_approach(WP_OUTBACKJOE, WP_START, nav_radius)" var="unit"/><!-- TODO maybe adifferent radius to set than default nav radius, bigger? -->
      <circle radius="nav_radius" until="NavQdrCloseTo(DegOfRad(nav_drop_start_qdr)-15)" wp="BASELEG"/>
    </block>

<!-- *********** Align on release path *********** -->
    <block name="align">
 

 <!-- TODO set AIRSPEED_AT_RELEASE-->
 <!--TODO set HEIGHT to 60m -->
    <!-- After Payload is released, back via EL3 -->
     
      <exception cond="nav_drop_update_release(WP_OUTBACKJOE)" deroute="ExitSearchAreaViaEL3"/>
      <go approaching_time="nav_drop_trigger_delay" from="START" hmode="route" wp="RELEASE"/>
    </block>

<!-- *********** Release Payload *********** -->
    <block name="shoot">
    <!-- TODO maybe extend crowbreak 80%? for slowes possible speed? -->
     <!--   <set value="0" var="ap_state->commands[COMMAND_BRAKE]"/> -->
      <!-- TODO is electrcal plane and almost there maybe stop proppelor from spinning for a few seconds -->
      <set value="NavDropShoot()" var="unit"/>
      <!-- TODO add maxspeed again -->
      <go from="RELEASE" hmode="route" wp="EL3"/>
      <!-- Maybe better not to close, more chance of delivery, TODO maybe even add a sensor to detect release if not try again -->
      <!-- <set value="NavDropCloseHatch" var="unit"/> -->

      <deroute block="ExitSearchAreaViaEL3"/><!-- Just To Make Sure -->
    </block>

<!-- *********************************************************
     ********************* Autolanding ***********************
     ***************************************************** -->

<!-- *********** Initiate landing *********** -->
<!--TODO better routing in combination with calced wind direction-->
    <block name="InitiateLandingApproach">
      <set var="v_ctl_auto_throttle_cruise_throttle" value="V_CTL_AUTO_THROTTLE_NOMINAL_CRUISE_THROTTLE"/><!-- TODO Test and deiscuss the stop dashing speedy flight here in this part of the block -->
    
<!--
To Waypoint runway align WP1 to WP2
then to WP touchdown
    <block name="Land Right AF-TD" strip_button="Land right (wp AF-TD)" strip_icon="land-right.png">
      <set value="DEFAULT_CIRCLE_RADIUS" var="nav_radius"/>
      <deroute block="land"/>
    </block>
    <block name="Land Left AF-TD" strip_button="Land left (wp AF-TD)" strip_icon="land-left.png">
      <set value="-DEFAULT_CIRCLE_RADIUS" var="nav_radius"/>
      <deroute block="land"/>
    </block>
 -->

    </block>

<!-- *********** Land *********** -->

    <block name="land">
      <call fun="nav_compute_baseleg(WP_AF, WP_TD, WP__BASELEG, nav_radius)"/>
      <circle radius="nav_radius" until="NavCircleCount() > 0.5" wp="_BASELEG"/>
      <!-- <set value="V_CTL_AUTO_THROTTLE_MIN_CRUISE_THROTTLE" var="v_ctl_auto_throttle_cruise_throttle"/> --> <!-- Good or Bad ?-->
      <circle radius="nav_radius" until="And(NavQdrCloseTo(DegOfRad(baseleg_out_qdr)-10), 10 > fabs(GetPosAlt() - WaypointAlt(WP__BASELEG)))" wp="_BASELEG"/>
    </block>

    <block name="final">
      <!-- Crow position for breaking and less shallow landing slope and chance of stall n missed touchdown-->
      <!-- <set value="MAX_PPRZ" var="ap_state->commands[COMMAND_BRAKE]"/> -->
      <exception cond="ground_alt + 8 > GetPosAlt()" deroute="flare"/>
      <go from="AF" hmode="route" vmode="glide" wp="TD" alt="ground_alt"/>
    </block>

    <!-- TODO test differend Land strategy crowbreaking
   <block name="final">
      <set value="-MAX_PPRZ" var="ap_state->commands[COMMAND_BRAKE]"/>
      <go approaching_time="0" from="AF" hmode="route" throttle="0.0" vmode="throttle" wp="TD"/>
      <attitude roll="0.0" throttle="0.0" until="FALSE" vmode="throttle"/>
    </block>
    -->

    <block name="flare">
 <!--    <exception cond="NavDetectGround()" deroute="Holding point"/> -->
<!--  <exception cond="!nav_is_in_flight()" deroute="landed"/> --> <!-- todo maybe global? -->
<!--  <call fun="NavStartDetectGround()"/> -->
    <!-->  <set value="MAX_PPRZ" var="ap_state->commands[COMMAND_BRAKE]"/> TODO different value maybe-->
      <go approaching_time="0" from="AF" hmode="route" throttle="0.0" vmode="throttle" wp="TD"/>
       <!-- ?make sure manual throttle is still possible in case of manual laning override ?-->
      <attitude roll="0.0" throttle="0.0" until="FALSE" vmode="throttle"/>
    </block>


<!--Below routes that are handy for testing only when in the field and performing several tests -->
<!--
    <block name="Oval 1-2" strip_button="Oval (wp 1-2)" strip_icon="oval.png">
      <oval p1="1" p2="2" radius="60"/>
    </block>
-->

<!-- WARNING: LOSS OF AIRFRAME if FTD is fully operational and tested in real life-->
<!--
    <block name="go too far">
      <go wp="TOOFAR"/>
      <circle wp="TOOFAR" radius="50"/>
     TODO: extra comman in case exeption does not trigger? like  <GO STDBY>
    </block>
-->

<!-- *********************************************************
     **************** Scrutineering Flight *******************
     ***************************************************** -->

<!-- As part of the scrutineering the Search and Rescue entrants of the UAV Challenge
Outback Rescue will be required to take off, track TST-1, TST-2, TST-3, TST-1... Until
requested to land. 

All emergency and failure requirements of the Challenge must be met, 

with the exception that for Loss of Data Link the procedure will be track direct
to “Airfield Home” and orbit for either a landing or regain of Data Link. -->

    <block name="Scrutineering Autonomy Start" strip_button="Square" strip_icon="path.png">
    <!--  <set value="0" var="ap_state->commands[COMMAND_CAMBER]"/> -->
   <!--   <set value="0" var="ap_state->commands[COMMAND_BRAKE]"/> -->

      <!--first a little standby then onto the simple square -->
      <for from="0" to="2" var="i">
        <circle radius="nav_radius"  wp="STDBY" until="NavCircleCount() > 1"/>      <!--  <circle alt="WaypointAlt(WP_STDBY)" radius="nav_radius" wp="STDBY"/> -->
      </for>
    </block>

    <block name="Scrutineering Autonomy Triangle">
     <!-- TODO: while we are up there take some pictures anyhow :) -->
      <for from="0" to="3" var="i"> <!-- TODO: make it depending on battry energy left -->
        <go from="TST-3" hmode="route" wp="TST-1"/>
        <go from="TST-1" hmode="route" wp="TST-2"/>
        <go from="TST-2" hmode="route" wp="TST-3"/>
      </for>
    </block>

    <!-- Just make sure it somehow stops in case of flightplan mishap or no being able to take over -->
    <block key="a" name="Airfieldhome" strip_button="Airfieldhome" strip_icon="home.png">
      <!--<circle radius="nav_radius" wp="AIRFIELDHOME"/> -->
      <!-- TODO have two landing stratigy, one with circle down one with a streight line maybe a thir depending on measured windspeed -->
      <deroute block="InitiateLandingApproach"/>
    </block>

 <!-- For easy testing r -->

<!--
    <block name="TestHatch">
      <set value="NavDropCloseHatch()" var="unit"/>
      <set value="NavDropShoot()" var="unit"/>
      <set value="NavDropCloseHatch()" var="unit"/>
      <set value="NavDropShoot()" var="unit"/>
      <set value="NavDropCloseHatch()" var="unit"/>
      <set value="NavDropShoot()" var="unit"/>
    </block>
-->
  </blocks>
</flight_plan>

